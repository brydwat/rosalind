# -*- coding: utf-8 -*-
"""
Created on Mon Feb 24 22:13:09 2025

Python Stronghold scripts
@author: zhiva

AI usage statement:
    ChatGPT and Google AI (through google's search engine) were used in lieu of searching documentation. No code was written but to understand functions and methods, I primarily used these to search or identify. 
"""

#1 Counting DNA Nucleotides
string = "CCGGGTGCAGACTCTGAGAATGGGCCACGCGCCCTTCCCGTAAAAAGGTTAGGTAGGTGGCGCGTGACCCGAAGTGTCATGCACCCATAATACTCTTGGCGCTGACATTAAAGAATATTACGGGTAGCAAGCGTCTGGCCCTAACCCTCACGGTGATCGTAGCCCGGAAGTTTCGCTCGCAACGATTGCAAGCAGGAGGGATCTTACTAATAAAGGAAGGGGGTCCGAGACTGGATTAGAAATTCCTCTGCGACTTCTAGGTGGAATAAACTAAAGTACTTTTTCGCCGCTGACCACGACCGCAGGTTAGTCCTACCCACGAAGATAATCGACGGCGGCGCCCGATGAGGTCTACTAGATCTAAACATAGTGGACAGCTTAATGTTGGTTCAAATTCGTTGGTAACATATGTCAGGCAGCAAGACGGAAGTGTACGTCGAGCAAAAGGCCCTGAACGACAACGAAGAACTTTATACTATGATTAACAAGCAAGGGTGAGATGAGAGGAGACGGACACGCCGAAAAATTTCATCTACGTAGATAGTCGGCCTGCGGAAGAGAGCTTTTGTGAGGGGTTTTATATATCAGATTCGCATCAATGCTATGTTCTACAAAATCACGAGTTAGCAATCAGCAATAAGCGAAGGTTCCCTTGTGTCATCACCCCAACACAAAAATGGGTAGTAGTGACTGCTGCGGAGATTATGGGCACTAGAAGGACTTAGAATACATAGCGCACAAGTAAGTTCCATAGGTGCCCGTAGTACGGCGCTAAGGTTCCATCGCATTCTATTCGGATCCCAGGTGTGAAACCATGTGCCCCT"

counts = {"A": 0, "C": 0, "G": 0, "T": 0}

for i in string:
    if i == "A":
        counts["A"] += 1
    elif i =="C":
        counts["C"] += 1
    elif i == "G":
        counts["G"] += 1
    elif i == "T":
        counts["T"] += 1

print(counts)

#2 Transcribing DNA to RNA

DNAstring = "TGATTCC"
RNAstring = ""

for i in DNAstring:
    if i == "T":
        RNAstring += "U"
    else:
        RNAstring += i

print(RNAstring)

#3 Complementing a Strand of DNA

DNAstring = "GCCCGAGATTTTCTGCAGTCGCACAACCCTTCCTGTTACGCCAACTGAAGGGGCTCTATGACTGTCGTACGAACCAGGGGCAAGCATGATAAGCGGAATGTAGCACGGTCAGGGGTATGGTCAGGCTGTCCAGTAGACAACGCTAACAATCCCTTAACTCTCTTACTTGCACGGCCACAGTCGTACGCACACCTGGCGAATAACCGTGGACTCTTGCGTCCGTGTATATTTGTTGGTGTACGTACGCCGCGTGCGTGGGAAATAGCCTTCGATTAGATAAGACCGATCGTGTCCTCCGTCGTGTGTTAAACTGACCTTACCTTAAGGAAGGGACGCCGAACTCGGGCTCATCGGATAGAAGCTCTAACGGCAGATCCTAAAGTCTACCTTATAGACCGTGATATAGCCCAATTCCTCGATTGATGCGTCGTGTCTCTTGTTCCAACTTTAGTGTCAATGCATCGCACGTCCATTCTCCAAGTCGTCTTCCATCATCGGTTGGGGAGCCATATACATGCATACCGTCTGGTTCCAGGAGGGGGGGACACTGGGCGCCTTCCTACATGTTCACAACTTAAAAACTATTTTAAATATGAGCTCGCAGTTTAGGTGTAACAGACATACCCCAGCTGTCATTGCTTCGGTTCGTTTGAAGCATGGAACGATGTACGACTGTGCGGATGTAGTTAACATTATAAGCGAGAACTTCCGGTGGTCTAATAGATAATCGGCCGTTTGAGGTCGGCCGATACGGGTGCCACTAAGTCGCTTTTCGGGTCCTCATCATTAGGGATTCCCCAATGGACATTAGCATTCCCACCCAACTGAGGGGACGTAGCGGCACAGTAACTCGAATGGATTGGACACGCGGAATACGGCACTGAAACGCTCTGGTATCGTAAAACAAGAAGAAGCTAAACAGTGATAGATCGAAGCACGCAATGTCTTCGTCTGTACGACTTCAGAATCCGGGTTACGGCCTGC"
revstring = DNAstring[::-1]
compDNAstring = ""

for i in revstring:
    if i == "A":
        compDNAstring += "T"
    elif i == "C":
        compDNAstring += "G"
    elif i == "G":
        compDNAstring += "C"
    elif i == "T":
        compDNAstring += "A"

print(compDNAstring)

#4 Rabbits and Recurrence Relations

#Fn = Fn-1 + Fn-2

# gen[n] = gen[n-1] + k * gen[n-2]

k = 3 # offspring multiplier, number of new pairs
n = 5 # number of generations to calculate
gen = [1, 1]  # Initial 2 generations, entered manually to avoid indexing error.

# Loop will and calculate next generation based on fibonnaci pattern then append.
for i in range(2, n):
    gen.append(gen[i-1] + k * gen[i-2])


print(gen)


