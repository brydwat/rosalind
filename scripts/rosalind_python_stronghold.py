# -*- coding: utf-8 -*-
"""
Created on Mon Feb 24 22:13:09 2025

Python Stronghold scripts
@author: zhiva

AI usage statement:
    ChatGPT and Google AI (through google's search engine) were used in lieu of searching documentation. No code was written but to understand functions and methods, I primarily used these to search or identify. 
"""

#1 Counting DNA Nucleotides
string = "CCGGGTGCAGACTCTGAGAATGGGCCACGCGCCCTTCCCGTAAAAAGGTTAGGTAGGTGGCGCGTGACCCGAAGTGTCATGCACCCATAATACTCTTGGCGCTGACATTAAAGAATATTACGGGTAGCAAGCGTCTGGCCCTAACCCTCACGGTGATCGTAGCCCGGAAGTTTCGCTCGCAACGATTGCAAGCAGGAGGGATCTTACTAATAAAGGAAGGGGGTCCGAGACTGGATTAGAAATTCCTCTGCGACTTCTAGGTGGAATAAACTAAAGTACTTTTTCGCCGCTGACCACGACCGCAGGTTAGTCCTACCCACGAAGATAATCGACGGCGGCGCCCGATGAGGTCTACTAGATCTAAACATAGTGGACAGCTTAATGTTGGTTCAAATTCGTTGGTAACATATGTCAGGCAGCAAGACGGAAGTGTACGTCGAGCAAAAGGCCCTGAACGACAACGAAGAACTTTATACTATGATTAACAAGCAAGGGTGAGATGAGAGGAGACGGACACGCCGAAAAATTTCATCTACGTAGATAGTCGGCCTGCGGAAGAGAGCTTTTGTGAGGGGTTTTATATATCAGATTCGCATCAATGCTATGTTCTACAAAATCACGAGTTAGCAATCAGCAATAAGCGAAGGTTCCCTTGTGTCATCACCCCAACACAAAAATGGGTAGTAGTGACTGCTGCGGAGATTATGGGCACTAGAAGGACTTAGAATACATAGCGCACAAGTAAGTTCCATAGGTGCCCGTAGTACGGCGCTAAGGTTCCATCGCATTCTATTCGGATCCCAGGTGTGAAACCATGTGCCCCT"

counts = {"A": 0, "C": 0, "G": 0, "T": 0}

for i in string:
    if i == "A":
        counts["A"] += 1
    elif i =="C":
        counts["C"] += 1
    elif i == "G":
        counts["G"] += 1
    elif i == "T":
        counts["T"] += 1

print(counts)

#2 Transcribing DNA to RNA

DNAstring = "TGATTCC"
RNAstring = ""

for i in DNAstring:
    if i == "T":
        RNAstring += "U"
    else:
        RNAstring += i

print(RNAstring)

#3 Complementing a Strand of DNA

DNAstring = "GCCCGAGATTTTCTGCAGTCGCACAACCCTTCCTGTTACGCCAACTGAAGGGGCTCTATGACTGTCGTACGAACCAGGGGCAAGCATGATAAGCGGAATGTAGCACGGTCAGGGGTATGGTCAGGCTGTCCAGTAGACAACGCTAACAATCCCTTAACTCTCTTACTTGCACGGCCACAGTCGTACGCACACCTGGCGAATAACCGTGGACTCTTGCGTCCGTGTATATTTGTTGGTGTACGTACGCCGCGTGCGTGGGAAATAGCCTTCGATTAGATAAGACCGATCGTGTCCTCCGTCGTGTGTTAAACTGACCTTACCTTAAGGAAGGGACGCCGAACTCGGGCTCATCGGATAGAAGCTCTAACGGCAGATCCTAAAGTCTACCTTATAGACCGTGATATAGCCCAATTCCTCGATTGATGCGTCGTGTCTCTTGTTCCAACTTTAGTGTCAATGCATCGCACGTCCATTCTCCAAGTCGTCTTCCATCATCGGTTGGGGAGCCATATACATGCATACCGTCTGGTTCCAGGAGGGGGGGACACTGGGCGCCTTCCTACATGTTCACAACTTAAAAACTATTTTAAATATGAGCTCGCAGTTTAGGTGTAACAGACATACCCCAGCTGTCATTGCTTCGGTTCGTTTGAAGCATGGAACGATGTACGACTGTGCGGATGTAGTTAACATTATAAGCGAGAACTTCCGGTGGTCTAATAGATAATCGGCCGTTTGAGGTCGGCCGATACGGGTGCCACTAAGTCGCTTTTCGGGTCCTCATCATTAGGGATTCCCCAATGGACATTAGCATTCCCACCCAACTGAGGGGACGTAGCGGCACAGTAACTCGAATGGATTGGACACGCGGAATACGGCACTGAAACGCTCTGGTATCGTAAAACAAGAAGAAGCTAAACAGTGATAGATCGAAGCACGCAATGTCTTCGTCTGTACGACTTCAGAATCCGGGTTACGGCCTGC"
revstring = DNAstring[::-1]
compDNAstring = ""

for i in revstring:
    if i == "A":
        compDNAstring += "T"
    elif i == "C":
        compDNAstring += "G"
    elif i == "G":
        compDNAstring += "C"
    elif i == "T":
        compDNAstring += "A"

print(compDNAstring)

#4 Rabbits and Recurrence Relations

#Fn = Fn-1 + Fn-2

#repr - reproductive age
#non - non-reproductive age

#k = reproductive multiplier

generations = 5
k = 3
repr_count = 0
non_count = 1
temp = 0


cycle = 1
while cycle <= generations:
    print("non-reproductive: " + str(non_count) + " " + " reproductive: " + str(repr_count) + " cycle: " + str(cycle))
    non_count += (repr_count * k)
    repr_count += non_count
    non_count -= non_count
    cycle +=1
    
print(repr_count + non_count)





